<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        lK9Fkdr8To/O5BcuR0YAAAAAAAAAAAAAAAAAAAAAAAAAADRDaWksZcTxDDqVvwAAER0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJGWnAeuy+tLn66/JAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACQm8Eujo6YCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wD///8A////AP///wD///8A//4/APz8HwD+OB8A/hA/AP8AfwD/gP8A/4H/AP+B
        /wD+AP8A/AB/APwYPwD4PB8A/H4/AP///wD///8A////AP///wD///8A////AA==
</value>
  </data>
</root>